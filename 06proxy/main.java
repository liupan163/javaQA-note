//谈谈java反射机制，动态代理是基于什么原理？

//通常认为，java是强类型语言，但因为提供了类反射等机制，也具备了部分动态类型语言的能力。

//动态代理是一种方便运行时，动态构建代理、动态处理代理方法调用的机制，很多场景都是利用类似机制做到的，比如用来包装RPC调用、面向切片编程AOP

//A：反射，引入运行时自省能力，通过运行时操作元数据或对象，java可以灵活地操作运行时才能确定的信息。
//B：而动态代理，则是延伸出来的一种广泛开发技术。处理很多繁琐的重复编程。

//AccessibleObject.setAccessible(boolean fag)

//动态代理，很多时候我们可以看成事装饰器模式，框架内部的寻址、序列化、反序列化等，对调用者没太大意义，通过代理，可以提供更加友善界面。

//A
代理模式（通过代理模式静默解决一些业务无关的问题，比如远程、安全、事务、日志。。。。。。让开发者只关心他的业务）
静态代理：事先写好代理类，可以手工编写，也可以用工具生成。
动态代理：运行时自动生成代理对象。
JDK动态代理：基于java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。新版本也开始结合ASM机制。
cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。
java反射机制常见应用：动态代理（AOP、RPC）、提供第三方开发者扩展能力（servlet容器、jdbc连接）、第三方组件创建对象DI。。。。。。

1关于反射
反射最大作用之一就在于我们可以不再编译期知道某个对象的类型，而在运行时通过提供完整的“包名+类名.class”得到。注意：不是在编译时，而是在运行时。

功能：
在运行时能判断任意一个对象所属的类。
在运行时能构造任意一个类的对象。
在运行时判断任意一个类所具有的成员变量和方法。
在运行时调用任意一个对象的方法。
说大白话，就是利用java反射机制我们可以加载一个运行时才能知道名称的class，获取其构造方法，并生成其对象实体，能对其fields设值，并唤起其methods。

应用场景：
反射技术常用在各类通用框架开发中。因为为了保证框架通用性，需要根据配置文件加载不同的对象或类，并调用不同的方法，这时候就需要运行时动态加载所需的类。

2动态代理
为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象。
所谓动态代理，就是实现阶段不用关心代理谁，运行阶段确定。
组成要素：
其一：抽象类接口
其二：被代理类（具体实现抽象接口的类）
其三：动态代理类：实际调用被代理类的方法和属性的类

